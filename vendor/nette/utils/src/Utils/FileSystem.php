n        }\n        else if (char === '<') {\n            // start of another tag (ignore the previous, incomplete one)\n            startNewTag();\n        }\n        else {\n            // Any other character, consider it an unquoted attribute value\n            state = 10 /* AttributeValueUnquoted */;\n        }\n    }\n    // https://www.w3.org/TR/html51/syntax.html#attribute-value-double-quoted-state\n    function stateAttributeValueDoubleQuoted(char) {\n        if (char === \"\\\"\") { // end the current double-quoted attribute\n            state = 11 /* AfterAttributeValueQuoted */;\n        }\n        else {\n            // consume the character as part of the double-quoted attribute value\n        }\n    }\n    // https://www.w3.org/TR/html51/syntax.html#attribute-value-single-quoted-state\n    function stateAttributeValueSingleQuoted(char) {\n        if (char === \"'\") { // end the current single-quoted attribute\n            state = 11 /* AfterAttributeValueQuoted */;\n        }\n        else {\n            // consume the character as part of the double-quoted attribute value\n        }\n    }\n    // https://www.w3.org/TR/html51/syntax.html#attribute-value-unquoted-state\n    function stateAttributeValueUnquoted(char) {\n        if (whitespaceRe.test(char)) {\n            state = 4 /* BeforeAttributeName */;\n        }\n        else if (char === '>') {\n            emitTagAndPreviousTextNode();\n        }\n        else if (char === '<') {\n            // start of another tag (ignore the previous, incomplete one)\n            startNewTag();\n        }\n        else {\n            // Any other character, treat it as part of the attribute value\n        }\n    }\n    // https://www.w3.org/TR/html51/syntax.html#after-attribute-value-quoted-state\n    function stateAfterAttributeValueQuoted(char) {\n        if (whitespaceRe.test(char)) {\n            state = 4 /* BeforeAttributeName */;\n        }\n        else if (char === '/') {\n            state = 12 /* SelfClosingStartTag */;\n        }\n        else if (char === '>') {\n            emitTagAndPreviousTextNode();\n        }\n        else if (char === '<') {\n            // start of another tag (ignore the previous, incomplete one)\n            startNewTag();\n        }\n        else {\n            // Any other character, \"parse error\". Spec says to switch to the\n            // BeforeAttributeState and re-consume the character, as it may be\n            // the start of a new attribute name\n            state = 4 /* BeforeAttributeName */;\n            reconsumeCurrentCharacter();\n        }\n    }\n    // A '/' has just been read in the current tag (presumably for '/>'), and \n    // this handles the next character\n    // https://www.w3.org/TR/html51/syntax.html#self-closing-start-tag-state\n    function stateSelfClosingStartTag(char) {\n        if (char === '>') {\n            currentTag = new CurrentTag(tslib_1.__assign({}, currentTag, { isClosing: true }));\n            emitTagAndPreviousTextNode(); // resets to Data state as well\n        }\n        else {\n            state = 4 /* BeforeAttributeName */;\n        }\n    }\n    // https://www.w3.org/TR/html51/syntax.html#markup-declaration-open-state\n    // (HTML Comments or !DOCTYPE)\n    function stateMarkupDeclarationOpen(char) {\n        if (html.substr(charIdx, 2) === '--') { // html comment\n            charIdx += 2; // \"consume\" characters\n            currentTag = new CurrentTag(tslib_1.__assign({}, currentTag, { type: 'comment' }));\n            state = 14 /* CommentStart */;\n        }\n        else if (html.substr(charIdx, 7).toUpperCase() === 'DOCTYPE') {\n            charIdx += 7; // \"consume\" characters\n            currentTag = new CurrentTag(tslib_1.__assign({}, currentTag, { type: 'doctype' }));\n            state = 20 /* Doctype */;\n        }\n        else {\n            // At this point, the spec specifies that the state machine should\n            // enter the \"bogus comment\" state, in which case any character(s) \n            // after the '<!' that were read should become an HTML comment up\n            // until the first '>' that is read (or EOF). Instead, we'll assume\n            // that a user just typed '<!' as part of text data\n            resetToDataState();\n        }\n    }\n    // Handles after the sequence '<!--' has been read\n    // https://www.w3.org/TR/html51/syntax.html#comment-start-state\n    function stateCommentStart(char) {\n        if (char === '-') {\n            // We've read the sequence '<!---' at this point (3 dashes)\n            state = 15 /* CommentStartDash */;\n        }\n        else if (char === '>') {\n            // At this point, we'll assume the comment wasn't a real comment\n            // so we'll just emit it as data. We basically read the sequence \n            // '<!-->'\n            resetToDataState();\n        }\n        else {\n            // Any other char, take it as part of the comment\n            state = 16 /* Comment */;\n        }\n    }\n    // We've read the sequence '<!---' at this point (3 dashes)\n    // https://www.w3.org/TR/html51/syntax.html#comment-start-dash-state\n    function stateCommentStartDash(char) {\n        if (char === '-') {\n            // We've read '<!----' (4 dashes) at this point\n            state = 18 /* CommentEnd */;\n        }\n        else if (char === '>') {\n            // At this point, we'll assume the comment wasn't a real comment\n            // so we'll just emit it as data. We basically read the sequence \n            // '<!--->'\n            resetToDataState();\n        }\n        else {\n            // Anything else, take it as a valid comment\n            state = 16 /* Comment */;\n        }\n    }\n    // Currently reading the comment's text (data)\n    // https://www.w3.org/TR/html51/syntax.html#comment-state\n    function stateComment(char) {\n        if (char === '-') {\n            state = 17 /* CommentEndDash */;\n        }\n        else {\n            // Any other character, stay in the Comment state\n        }\n    }\n    // When we we've read the first dash inside a comment, it may signal the\n    // end of the comment if we read another dash\n    // https://www.w3.org/TR/html51/syntax.html#comment-end-dash-state\n    function stateCommentEndDash(char) {\n        if (char === '-') {\n            state = 18 /* CommentEnd */;\n        }\n        else {\n            // Wasn't a dash, must still be part of the comment\n            state = 16 /* Comment */;\n        }\n    }\n    // After we've read two dashes inside a comment, it may signal the end of \n    // the comment if we then read a '>' char\n    // https://www.w3.org/TR/html51/syntax.html#comment-end-state\n    function stateCommentEnd(char) {\n        if (char === '>') {\n            emitTagAndPreviousTextNode();\n        }\n        else if (char === '!') {\n            state = 19 /* CommentEndBang */;\n        }\n        else if (char === '-') {\n            // A 3rd '-' has been read: stay in the CommentEnd state\n        }\n        else {\n            // Anything else, switch back to the comment state since we didn't\n            // read the full \"end comment\" sequence (i.e. '-->')\n            state = 16 /* Comment */;\n        }\n    }\n    // We've read the sequence '--!' inside of a comment\n    // https://www.w3.org/TR/html51/syntax.html#comment-end-bang-state\n    function stateComme