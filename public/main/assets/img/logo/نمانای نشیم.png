	},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"12": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"13": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"14": {
					"name": "variable.other.object.declare.cuda-cpp"
				},
				"15": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"16": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"17": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"18": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"19": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"20": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				}
			}
		},
		"parameter_or_maybe_value": {
			"begin": "((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=\\w)",
			"end": "(?:(?=\\))|(,))",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"2": {
					"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
				},
				"3": {
					"name": "comment.block.cuda-cpp"
				},
				"4": {
					"patterns": [
						{
							"match": "\\*\\/",
							"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
						},
						{
							"match": "\\*",
							"name": "comment.block.cuda-cpp"
						}
					]
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.separator.delimiter.comma.cuda-cpp"
				}
			},
			"name": "meta.parameter.cuda-cpp",
			"patterns": [
				{
					"include": "#ever_present_context"
				},
				{
					"include": "#function_pointer_parameter"
				},
				{
					"include": "#memory_operators"
				},
				{
					"include": "#builtin_storage_type_initilizer"
				},
				{
					"include": "#curly_initializer"
				},
				{
					"include": "#decltype"
				},
				{
					"include": "#vararg_ellipses"
				},
				{
					"match": "((?:((?:(?:__constant__)|(?:__restrict__)|(?:__managed__)|(?:__shared__)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))+)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:\\s)*+(?<!\\w)(?:(?:(?:((?:(?:threadIdx)|(?:unsigned)|(?:blockIdx)|(?:blockDim)|(?:warpSize)|(?:wchar_t)|(?:gridDim)|(?:signed)|(?:double)|(?:short)|(?:float)|(?:auto)|(?:void)|(?:char)|(?:long)|(?:bool)|(?:int)))|((?:(?:uint_least16_t)|(?:uint_least32_t)|(?:uint_least64_t)|(?:int_least16_t)|(?:int_least32_t)|(?:int_least64_t)|(?:uint_least8_t)|(?:uint_fast16_t)|(?:uint_fast32_t)|(?:uint_fast64_t)|(?:int_least8_t)|(?:int_fast16_t)|(?:int_fast32_t)|(?:int_fast64_t)|(?:uint_fast8_t)|(?:suseconds_t)|(?:int_fast8_t)|(?:useconds_t)|(?:ulonglong1)|(?:ulonglong2)|(?:ulonglong3)|(?:ulonglong4)|(?:blksize_t)|(?:in_addr_t)|(?:in_port_t)|(?:uintptr_t)|(?:uintmax_t)|(?:uintmax_t)|(?:uintmax_t)|(?:longlong1)|(?:longlong2)|(?:longlong3)|(?:longlong4)|(?:u_quad_t)|(?:blkcnt_t)|(?:uint16_t)|(?:uint32_t)|(?:uint64_t)|(?:intptr_t)|(?:intmax_t)|(?:intmax_t)|(?:u_short)|(?:qaddr_t)|(?:caddr_t)|(?:daddr_t)|(?:fixpt_t)|(?:nlink_t)|(?:segsz_t)|(?:swblk_t)|(?:clock_t)|(?:ssize_t)|(?:int16_t)|(?:int32_t)|(?:int64_t)|(?:uint8_t)|(?:ushort1)|(?:ushort2)|(?:ushort3)|(?:ushort4)|(?:double1)|(?:double2)|(?:double3)|(?:double4)|(?:u_char)|(?:u_long)|(?:ushort)|(?:quad_t)|(?:mode_t)|(?:size_t)|(?:time_t)|(?:int8_t)|(?:uchar1)|(?:uchar2)|(?:uchar3)|(?:uchar4)|(?:short1)|(?:short2)|(?:short3)|(?:short4)|(?:ulong4)|(?:ulong1)|(?:ulong2)|(?:ulong3)|(?:ulong4)|(?:float1)|(?:float2)|(?:float3)|(?:float4)|(?:u_int)|(?:div_t)|(?:dev_t)|(?:gid_t)|(?:ino_t)|(?:key_t)|(?:pid_t)|(?:off_t)|(?:uid_t)|(?:char1)|(?:char2)|(?:char3)|(?:char4)|(?:uint1)|(?:uint2)|(?:uint3)|(?:uint4)|(?:long1)|(?:long2)|(?:long3)|(?:uint)|(?:id_t)|(?:id_t)|(?:int1)|(?:int2)|(?:int3)|(?:int4)|(?:dim3))))|((?:(?:pthread_rwlockattr_t)|(?:pthread_mutexattr_t)|(?:pthread_condattr_t)|(?:pthread_rwlock_t)|(?:pthread_mutex_t)|(?:pthread_attr_t)|(?:pthread_cond_t)|(?:pthread_once_t)|(?:pthread_key_t)|(?:pthread_t))))|([a-zA-Z_](?:\\w)*_t))(?!\\w)|((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\b\\b(?<!\\W__constant__|^__constant__|\\W__restrict__|^__restrict__|\\W__managed__|^__managed__|\\W__shared__|^__shared__|\\Wvolatile|^volatile|\\Wregister|^register|\\Wrestrict|^restrict|\\Wstatic|^static|\\Wextern|^extern|\\Wconst|^const)))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=,|\\)|=)",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#storage_types"
								}
							]
						},
						"2": {
							"name": "storage.modifier.specifier.parameter.cuda-cpp"
						},
						"3": {
							"patterns": [
								{
									"include": "#inline_comment"
								}
							]
						},
						"4": {
							"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
						},
						"5": {
							"name": "comment.block.cuda-cpp"
						},
						"6": {
							"patterns": [
								{
									"match": "\\*\\/",
									"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
								},
								{
									"match": "\\*",
									"name": "comment.block.cuda-cpp"
								}
							]
						},
						"7": {
							"patterns": [
								{
									"include": "#inline_comment"
								}
							]
						},
						"8": {
							"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
						},
						"9": {
							"name": "comment.block.cuda-cpp"
						},
						"10": {
							"patterns": [
								{
									"match": "\\*\\/",
									"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
								},
								{
									"match": "\\*",
									"name": "comment.block.cuda-cpp"
								}
							]
						},
						"11": {
							"name": "storage.type.primitive.cuda-cpp storage.type.built-in.primitive.cuda-cpp"
						},
						"12": {
							"name": "storage.type.cuda-cpp storage.type.built-in.cuda-cpp"
						},
						"13": {
							"name": "support.type.posix-reserved.pthread.cuda-cpp support.type.built-in.posix-reserved.pthread.cuda-cpp"
						},
						"14": {
							"name": "support.type.posix-reserved.cuda-cpp support.type.built-in.posix-reserved.cuda-cpp"
						},
						"15": {
							"name": "entity.name.type.parameter.cuda-cpp"
						},
						"16": {
							"patterns": [
								{
									"include": "#inline_comment"
								}
							]
						},
						"17": {
							"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
						},
						"18": {
							"name": "comment.block.cuda-cpp"
						},
						"19": {
							"patterns": [
								{
									"match": "\\*\\/",
									"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
								},
								{
									"match": "\\*",
									"name": "comment.block.cuda-cpp"
								}
							]
						}
					}
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#function_call"
				},
				{
					"include": "#scope_resolution_parameter_inner_generated"
				},
				{
					"match": "(?:(?:struct)|(?:class)|(?:union)|(?:enum))",
					"name": "storage.type.$0.cuda-cpp"
				},
				{
					"begin": "(?<==)",
					"end": "(?:(?=\\))|(,))",
					"beginCaptures": {},
					"endCaptures": {
						"1": {
							"name": "punctuation.separator.delimiter.comma.cuda-cpp"
						}
					},
					"patterns": [
						{
							"include": "#evaluation_context"
						}
					]
				},
				{
					"match": "(?<!\\s|\\(|,|:)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?=(?:\\)|,|\\[|=|\\/\\/|(?:(?:\\n)|$)))",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#inline_comment"
								}
							]
						},
						"2": {
							"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
						},
						"3": {
							"name": "comment.block.cuda-cpp"
						},
						"4": {
							"patterns": [
								{
									"match": "\\*\\/",
									"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
								},
								{
									"match": "\\*",
									"name": "comment.block.cuda-cpp"
								}
							]
						},
						"5": {
							"name": "variable.parameter.cuda-cpp"
						},
						"6": {
							"patterns": [
								{
									"include": "#inline_comment"
								}
							]
						},
						"7": {
							"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
						},
						"8": {
							"name": "comment.block.cuda-cpp"
						},
						"9": {
							"patterns": [
								{
									"match": "\\*\\/",
									"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
								},
								{
									"match": "\\*",
									"name": "comment.block.cuda-cpp"
								}
							]
						}
					}
				},
				{
					"include": "#attributes_context"
				},
				{
					"begin": "\\[",
					"end": "\\]",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.square.array.type.cuda-cpp"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.square.array.type.cuda-cpp"
						}
					},
					"name": "meta.bracket.square.array.cuda-cpp",
					"patterns": [
						{
							"include": "#evaluation_context"
						}
					]
				},
				{
					"match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b(?<!\\Wstruct|^struct|\\Wclass|^class|\\Wunion|^union|\\Wenum|^enum)",
					"name": "entity.name.type.parameter.cuda-cpp"
				},
				{
					"include": "#template_call_range"
				},
				{
					"match": "((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*))",
					"captures": {
						"0": {
							"patterns": [
								{
									"match": "\\*",
									"name": "storage.modifier.pointer.cuda-cpp"
								},
								{
									"match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
									"captures": {
										"1": {
											"patterns": [
												{
													"include": "#inline_comment"
												}
											]
										},
										"2": {
											"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
										},
										"3": {
											"name": "comment.block.cuda-cpp"
										},
										"4": {
											"patterns": [
												{
													"match": "\\*\\/",
													"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
												},
												{
													"match": "\\*",
													"name": "comment.block.cuda-cpp"
												}
											]
										}
									},
									"name": "invalid.illegal.reference-type.cuda-cpp"
								},
								{
									"match": "\\&",
									"name": "storage.modifier.reference.cuda-cpp"
								}
							]
						},
						"1": {
							"patterns": [
								{
									"include": "#inline_comment"
								}
							]
						},
						"2": {
							"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
						},
						"3": {
							"name": "comment.block.cuda-cpp"
						},
						"4": {
							"patterns": [
								{
									"match": "\\*\\/",
									"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
								},
								{
									"match": "\\*",
									"name": "comment.block.cuda-cpp"
								}
							]
						},
						"5": {
							"patterns": [
								{
									"include": "#inline_comment"
								}
							]
						},
						"6": {
							"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
						},
						"7": {
							"name": "comment.block.cuda-cpp"
						},
						"8": {
							"patterns": [
								{
									"match": "\\*\\/",
									"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
								},
								{
									"match": "\\*",
									"name": "comment.block.cuda-cpp"
								}
							]
						}
					}
				},
				{
					"include": "#evaluation_context"
				}
			]
		},
		"parameter_struct": {
			"match": "(struct)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:\\[((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\]((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=,|\\)|\\n)",
			"captures": {
				"1": {
					"name": "storage.type.struct.parameter.cuda-cpp"
				},
				"2": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"4": {
					"name": "entity.name.type.struct.parameter.cuda-cpp"
				},
				"5": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"6": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"7": {
					"patterns": [
						{
							"match": "\\*",
							"name": "storage.modifier.pointer.cuda-cpp"
						},
						{
							"match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
							"captures": {
								"1": {
									"patterns": [
										{
											"include": "#inline_comment"
										}
									]
								},
								"2": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"3": {
									"name": "comment.block.cuda-cpp"
								},
								"4": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							},
							"name": "invalid.illegal.reference-type.cuda-cpp"
						},
						{
							"match": "\\&",
							"name": "storage.modifier.reference.cuda-cpp"
						}
					]
				},
				"8": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"9": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"10": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"11": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"12": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"13": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"14": {
					"name": "variable.other.object.declare.cuda-cpp"
				},
				"15": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"16": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"17": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"18": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"19": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"20": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				}
			}
		},
		"parameter_union": {
			"match": "(union)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))?(?:(?:&|(?:\\*))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*(?:&|(?:\\*)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:\\[((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))\\]((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))?(?=,|\\)|\\n)",
			"captures": {
				"1": {
					"name": "storage.type.union.parameter.cuda-cpp"
				},
				"2": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"4": {
					"name": "entity.name.type.union.parameter.cuda-cpp"
				},
				"5": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"6": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"7": {
					"patterns": [
						{
							"match": "\\*",
							"name": "storage.modifier.pointer.cuda-cpp"
						},
						{
							"match": "(?:\\&((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))){2,}\\&",
							"captures": {
								"1": {
									"patterns": [
										{
											"include": "#inline_comment"
										}
									]
								},
								"2": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"3": {
									"name": "comment.block.cuda-cpp"
								},
								"4": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							},
							"name": "invalid.illegal.reference-type.cuda-cpp"
						},
						{
							"match": "\\&",
							"name": "storage.modifier.reference.cuda-cpp"
						}
					]
				},
				"8": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"9": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"10": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"11": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"12": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"13": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"14": {
					"name": "variable.other.object.declare.cuda-cpp"
				},
				"15": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"16": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"17": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"18": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"19": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"20": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				}
			}
		},
		"parentheses": {
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.cuda-cpp"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.cuda-cpp"
				}
			},
			"name": "meta.parens.cuda-cpp",
			"patterns": [
				{
					"include": "#over_qualified_types"
				},
				{
					"match": "(?<!:):(?!:)",
					"name": "punctuation.separator.colon.range-based.cuda-cpp"
				},
				{
					"include": "#evaluation_context"
				}
			]
		},
		"pragma": {
			"begin": "^((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(#)(?:(?:\\s)+)?pragma\\b",
			"end": "(?<!\\\\)(?=\\n)",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.directive.pragma.cuda-cpp"
				},
				"1": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"2": {
					"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
				},
				"3": {
					"name": "comment.block.cuda-cpp"
				},
				"4": {
					"patterns": [
						{
							"match": "\\*\\/",
							"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
						},
						{
							"match": "\\*",
							"name": "comment.block.cuda-cpp"
						}
					]
				},
				"5": {
					"name": "punctuation.definition.directive.cuda-cpp"
				}
			},
			"endCaptures": {},
			"name": "meta.preprocessor.pragma.cuda-cpp",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#string_context"
				},
				{
					"match": "[a-zA-Z_$][\\w\\-$]*",
					"name": "entity.other.attribute-name.pragma.preprocessor.cuda-cpp"
				},
				{
					"include": "#preprocessor_number_literal"
				},
				{
					"include": "#line_continuation_character"
				}
			]
		},
		"pragma_mark": {
			"match": "(^((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(#)(?:(?:\\s)+)?pragma(?:\\s)+mark)(?:\\s)+(.*)",
			"captures": {
				"1": {
					"name": "keyword.control.directive.pragma.pragma-mark.cuda-cpp"
				},
				"2": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"4": {
					"name": "punctuation.definition.directive.cuda-cpp"
				},
				"5": {
					"name": "entity.name.tag.pragma-mark.cuda-cpp"
				}
			},
			"name": "meta.preprocessor.pragma.cuda-cpp"
		},
		"predefined_macros": {
			"patterns": [
				{
					"match": "\\b(__cplusplus|__DATE__|__FILE__|__LINE__|__STDC__|__STDC_HOSTED__|__STDC_NO_COMPLEX__|__STDC_VERSION__|__STDCPP_THREADS__|__TIME__|NDEBUG|__OBJC__|__ASSEMBLER__|__ATOM__|__AVX__|__AVX2__|_CHAR_UNSIGNED|__CLR_VER|_CONTROL_FLOW_GUARD|__COUNTER__|__cplusplus_cli|__cplusplus_winrt|_CPPRTTI|_CPPUNWIND|_DEBUG|_DLL|__FUNCDNAME__|__FUNCSIG__|__FUNCTION__|_INTEGRAL_MAX_BITS|__INTELLISENSE__|_ISO_VOLATILE|_KERNEL_MODE|_M_AMD64|_M_ARM|_M_ARM_ARMV7VE|_M_ARM_FP|_M_ARM64|_M_CEE|_M_CEE_PURE|_M_CEE_SAFE|_M_FP_EXCEPT|_M_FP_FAST|_M_FP_PRECISE|_M_FP_STRICT|_M_IX86|_M_IX86_FP|_M_X64|_MANAGED|_MSC_BUILD|_MSC_EXTENSIONS|_MSC_FULL_VER|_MSC_VER|_MSVC_LANG|__MSVC_RUNTIME_CHECKS|_MT|_NATIVE_WCHAR_T_DEFINED|_OPENMP|_PREFAST|__TIMESTAMP__|_VC_NO_DEFAULTLIB|_WCHAR_T_DEFINED|_WIN32|_WIN64|_WINRT_DLL|_ATL_VER|_MFC_VER|__GFORTRAN__|__GNUC__|__GNUC_MINOR__|__GNUC_PATCHLEVEL__|__GNUG__|__STRICT_ANSI__|__BASE_FILE__|__INCLUDE_LEVEL__|__ELF__|__VERSION__|__OPTIMIZE__|__OPTIMIZE_SIZE__|__NO_INLINE__|__GNUC_STDC_INLINE__|__CHAR_UNSIGNED__|__WCHAR_UNSIGNED__|__REGISTER_PREFIX__|__REGISTER_PREFIX__|__SIZE_TYPE__|__PTRDIFF_TYPE__|__WCHAR_TYPE__|__WINT_TYPE__|__INTMAX_TYPE__|__UINTMAX_TYPE__|__SIG_ATOMIC_TYPE__|__INT8_TYPE__|__INT16_TYPE__|__INT32_TYPE__|__INT64_TYPE__|__UINT8_TYPE__|__UINT16_TYPE__|__UINT32_TYPE__|__UINT64_TYPE__|__INT_LEAST8_TYPE__|__INT_LEAST16_TYPE__|__INT_LEAST32_TYPE__|__INT_LEAST64_TYPE__|__UINT_LEAST8_TYPE__|__UINT_LEAST16_TYPE__|__UINT_LEAST32_TYPE__|__UINT_LEAST64_TYPE__|__INT_FAST8_TYPE__|__INT_FAST16_TYPE__|__INT_FAST32_TYPE__|__INT_FAST64_TYPE__|__UINT_FAST8_TYPE__|__UINT_FAST16_TYPE__|__UINT_FAST32_TYPE__|__UINT_FAST64_TYPE__|__INTPTR_TYPE__|__UINTPTR_TYPE__|__CHAR_BIT__|__SCHAR_MAX__|__WCHAR_MAX__|__SHRT_MAX__|__INT_MAX__|__LONG_MAX__|__LONG_LONG_MAX__|__WINT_MAX__|__SIZE_MAX__|__PTRDIFF_MAX__|__INTMAX_MAX__|__UINTMAX_MAX__|__SIG_ATOMIC_MAX__|__INT8_MAX__|__INT16_MAX__|__INT32_MAX__|__INT64_MAX__|__UINT8_MAX__|__UINT16_MAX__|__UINT32_MAX__|__UINT64_MAX__|__INT_LEAST8_MAX__|__INT_LEAST16_MAX__|__INT_LEAST32_MAX__|__INT_LEAST64_MAX__|__UINT_LEAST8_MAX__|__UINT_LEAST16_MAX__|__UINT_LEAST32_MAX__|__UINT_LEAST64_MAX__|__INT_FAST8_MAX__|__INT_FAST16_MAX__|__INT_FAST32_MAX__|__INT_FAST64_MAX__|__UINT_FAST8_MAX__|__UINT_FAST16_MAX__|__UINT_FAST32_MAX__|__UINT_FAST64_MAX__|__INTPTR_MAX__|__UINTPTR_MAX__|__WCHAR_MIN__|__WINT_MIN__|__SIG_ATOMIC_MIN__|__SCHAR_WIDTH__|__SHRT_WIDTH__|__INT_WIDTH__|__LONG_WIDTH__|__LONG_LONG_WIDTH__|__PTRDIFF_WIDTH__|__SIG_ATOMIC_WIDTH__|__SIZE_WIDTH__|__WCHAR_WIDTH__|__WINT_WIDTH__|__INT_LEAST8_WIDTH__|__INT_LEAST16_WIDTH__|__INT_LEAST32_WIDTH__|__INT_LEAST64_WIDTH__|__INT_FAST8_WIDTH__|__INT_FAST16_WIDTH__|__INT_FAST32_WIDTH__|__INT_FAST64_WIDTH__|__INTPTR_WIDTH__|__INTMAX_WIDTH__|__SIZEOF_INT__|__SIZEOF_LONG__|__SIZEOF_LONG_LONG__|__SIZEOF_SHORT__|__SIZEOF_POINTER__|__SIZEOF_FLOAT__|__SIZEOF_DOUBLE__|__SIZEOF_LONG_DOUBLE__|__SIZEOF_SIZE_T__|__SIZEOF_WCHAR_T__|__SIZEOF_WINT_T__|__SIZEOF_PTRDIFF_T__|__BYTE_ORDER__|__ORDER_LITTLE_ENDIAN__|__ORDER_BIG_ENDIAN__|__ORDER_PDP_ENDIAN__|__FLOAT_WORD_ORDER__|__DEPRECATED|__EXCEPTIONS|__GXX_RTTI|__USING_SJLJ_EXCEPTIONS__|__GXX_EXPERIMENTAL_CXX0X__|__GXX_WEAK__|__NEXT_RUNTIME__|__LP64__|_LP64|__SSP__|__SSP_ALL__|__SSP_STRONG__|__SSP_EXPLICIT__|__SANITIZE_ADDRESS__|__SANITIZE_THREAD__|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16|__HAVE_SPECULATION_SAFE_VALUE|__GCC_HAVE_DWARF2_CFI_ASM|__FP_FAST_FMA|__FP_FAST_FMAF|__FP_FAST_FMAL|__FP_FAST_FMAF16|__FP_FAST_FMAF32|__FP_FAST_FMAF64|__FP_FAST_FMAF128|__FP_FAST_FMAF32X|__FP_FAST_FMAF64X|__FP_FAST_FMAF128X|__GCC_IEC_559|__GCC_IEC_559_COMPLEX|__NO_MATH_ERRNO__|__has_builtin|__has_feature|__has_extension|__has_cpp_attribute|__has_c_attribute|__has_attribute|__has_declspec_attribute|__is_identifier|__has_include|__has_include_next|__has_warning|__BASE_FILE__|__FILE_NAME__|__clang__|__clang_major__|__clang_minor__|__clang_patchlevel__|__clang_version__|__fp16|_Float16)\\b",
					"captures": {
						"1": {
							"name": "entity.name.other.preprocessor.macro.predefined.$1.cuda-cpp"
						}
					}
				},
				{
					"match": "\\b__([A-Z_]+)__\\b",
					"name": "entity.name.other.preprocessor.macro.predefined.probably.$1.cuda-cpp"
				}
			]
		},
		"preprocessor_conditional_context": {
			"patterns": [
				{
					"include": "#preprocessor_conditional_defined"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#language_constants"
				},
				{
					"include": "#string_context"
				},
				{
					"include": "#d9bc4796b0b_preprocessor_number_literal"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#predefined_macros"
				},
				{
					"include": "#macro_name"
				},
				{
					"include": "#line_continuation_character"
				}
			]
		},
		"preprocessor_conditional_defined": {
			"begin": "((?<!\\w)defined(?!\\w))(\\()",
			"end": "(?:\\)|(?<!\\\\)(?=\\n))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.conditional.defined.cuda-cpp"
				},
				"2": {
					"name": "punctuation.section.parens.control.defined.cuda-cpp"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.control.defined.cuda-cpp"
				}
			},
			"patterns": [
				{
					"include": "#macro_name"
				}
			]
		},
		"preprocessor_conditional_parentheses": {
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.cuda-cpp"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.cuda-cpp"
				}
			},
			"name": "meta.parens.preprocessor.conditional.cuda-cpp"
		},
		"preprocessor_conditional_range": {
			"begin": "^((?:(?:(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(#)(?:(?:\\s)+)?((?:(?:ifndef|ifdef)|if))",
			"end": "^(?!\\s*+#\\s*(?:else|endif))",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.directive.conditional.$6.cuda-cpp"
				},
				"1": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"2": {
					"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
				},
				"3": {
					"name": "comment.block.cuda-cpp"
				},
				"4": {
					"patterns": [
						{
							"match": "\\*\\/",
							"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
						},
						{
							"match": "\\*",
							"name": "comment.block.cuda-cpp"
						}
					]
				},
				"5": {
					"name": "punctuation.definition.directive.cuda-cpp"
				},
				"6": {}
			},
			"endCaptures": {},
			"patterns": [
				{
					"begin": "\\G(?<=ifndef|ifdef|if)",
					"end": "(?<!\\\\)(?=\\n)",
					"beginCaptures": {},
					"endCaptures": {},
					"name": "meta.preprocessor.conditional.cuda-cpp",
					"patterns": [
						{
							"include": "#preprocessor_conditional_context"
						}
					]
				},
				{
					"include": "$self"
				}
			]
		},
		"preprocessor_conditional_standalone": {
			"match": "^((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(#)(?:(?:\\s)+)?((?<!\\w)(?:endif|else|elif)(?!\\w))",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"2": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"3": {
					"name": "punctuation.definition.directive.cuda-cpp"
				}
			},
			"name": "keyword.control.directive.$4.cuda-cpp"
		},
		"preprocessor_context": {
			"patterns": [
				{
					"include": "#pragma_mark"
				},
				{
					"include": "#pragma"
				},
				{
					"include": "#include"
				},
				{
					"include": "#line"
				},
				{
					"include": "#diagnostic"
				},
				{
					"include": "#undef"
				},
				{
					"include": "#preprocessor_conditional_range"
				},
				{
					"include": "#single_line_macro"
				},
				{
					"include": "#macro"
				},
				{
					"include": "#preprocessor_conditional_standalone"
				},
				{
					"include": "#macro_argument"
				}
			]
		},
		"qualified_type": {
			"match": "\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z))))*((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<11>?)+>)(?:\\s)*+)?::)*+)?((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:__forceinline__)|(?:atomic_noexcept)|(?:__has_include)|(?:atomic_cancel)|(?:atomic_commit)|(?:dynamic_cast)|(?:__constant__)|(?:__restrict__)|(?:__noinline__)|(?:thread_local)|(?:synchronized)|(?:static_cast)|(?:__managed__)|(?:const_cast)|(?:__shared__)|(?:__global__)|(?:__device__)|(?:co_return)|(?:constexpr)|(?:constexpr)|(?:constexpr)|(?:consteval)|(?:protected)|(?:threadIdx)|(?:namespace)|(?:co_return)|(?:noexcept)|(?:noexcept)|(?:continue)|(?:co_await)|(?:co_yield)|(?:volatile)|(?:register)|(?:restrict)|(?:explicit)|(?:__host__)|(?:override)|(?:volatile)|(?:noexcept)|(?:blockIdx)|(?:blockDim)|(?:warpSize)|(?:template)|(?:operator)|(?:decltype)|(?:typename)|(?:requires)|(?:co_await)|(?:co_yield)|(?:reflexpr)|(?:alignof)|(?:alignas)|(?:default)|(?:nullptr)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:gridDim)|(?:typedef)|(?:__asm__)|(?:concept)|(?:sizeof)|(?:delete)|(?:not_eq)|(?:bitand)|(?:and_eq)|(?:xor_eq)|(?:typeid)|(?:switch)|(?:return)|(?:static)|(?:extern)|(?:inline)|(?:friend)|(?:public)|(?:ifndef)|(?:define)|(?:pragma)|(?:export)|(?:import)|(?:module)|(?:compl)|(?:bitor)|(?:throw)|(?:or_eq)|(?:while)|(?:catch)|(?:break)|(?:false)|(?:const)|(?:final)|(?:const)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:using)|(?:audit)|(?:axiom)|(?:else)|(?:goto)|(?:case)|(?:NULL)|(?:true)|(?:elif)|(?:else)|(?:line)|(?:this)|(?:not)|(?:new)|(?:xor)|(?:and)|(?:for)|(?:try)|(?:asm)|(?:or)|(?:do)|(?:if)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<11>?)+>)?(?![\\w<:.])",
			"captures": {
				"0": {
					"patterns": [
						{
							"match": "::",
							"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.cuda-cpp"
						},
						{
							"match": "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)",
							"name": "storage.type.$0.cuda-cpp"
						},
						{
							"include": "#attributes_context"
						},
						{
							"include": "#storage_types"
						},
						{
							"include": "#number_literal"
						},
						{
							"include": "#string_context"
						},
						{
							"include": "#comma"
						},
						{
							"include": "#scope_resolution_inner_generated"
						},
						{
							"begin": "<",
							"end": ">",
							"beginCaptures": {
								"0": {
									"name": "punctuation.section.angle-brackets.begin.template.call.cuda-cpp"
								}
							},
							"endCaptures": {
								"0": {
									"name": "punctuation.section.angle-brackets.end.template.call.cuda-cpp"
								}
							},
							"name": "meta.template.call.cuda-cpp",
							"patterns": [
								{
									"include": "#template_call_context"
								}
							]
						},
						{
							"match": "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*",
							"name": "entity.name.type.cuda-cpp"
						}
					]
				},
				"1": {
					"patterns": [
						{
							"include": "#attributes_context"
						},
						{
							"include": "#number_literal"
						}
					]
				},
				"2": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"4": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"5": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"6": {
					"patterns": [
						{
							"match": "::",
							"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.type.cuda-cpp"
						},
						{
							"match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
							"name": "entity.name.scope-resolution.type.cuda-cpp"
						},
						{
							"include": "#template_call_range"
						}
					]
				},
				"7": {
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				},
				"9": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"10": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				}
			},
			"name": "meta.qualified_type.cuda-cpp"
		},
		"qualifiers_and_specifiers_post_parameters": {
			"match": "((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))((?:((?:((?:(?>(?:\\s)+)|\\/\\*(?:[^\\*]|(?:\\*)++[^\\/])*+(?:\\*)++\\/)+)|(?:\\b)|(?=\\W)|(?<=\\W)|(?:\\A)|(?:\\Z)))(?<!\\w)(?:(?:override)|(?:volatile)|(?:noexcept)|(?:final)|(?:const))(?!\\w))+(?=\\s*(?:(?:\\{|;)|[\\n\\r])))",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"2": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				},
				"3": {
					"name": "storage.modifier.specifier.functional.post-parameters.$3.cuda-cpp"
				},
				"4": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"5": {
					"patterns": [
						{
							"match": "(?:(?>(?:\\s)+)|(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/)))",
							"captures": {
								"1": {
									"name": "comment.block.cuda-cpp punctuation.definition.comment.begin.cuda-cpp"
								},
								"2": {
									"name": "comment.block.cuda-cpp"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.cuda-cpp punctuation.definition.comment.end.cuda-cpp"
										},
										{
											"match": "\\*",
											"name": "comment.block.cuda-cpp"
										}
									]
								}
							}
						}
					]
				}
			}
		},
		"scope_resolution": {
			"match": "(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?::)*\\s*+",
			"captures": {
				"0": {
					"patterns": [
						{
							"include": "#scope_resolution_inner_generated"
						}
					]
				},
				"1": {
					"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.cuda-cpp"
				},
				"2": {
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				}
			}
		},
		"scope_resolution_function_call": {
			"match": "(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?::)*\\s*+",
			"captures": {
				"0": {
					"patterns": [
						{
							"include": "#scope_resolution_function_call_inner_generated"
						}
					]
				},
				"1": {
					"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.function.call.cuda-cpp"
				},
				"2": {
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				}
			}
		},
		"scope_resolution_function_call_inner_generated": {
			"match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?(::)",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#scope_resolution_function_call_inner_generated"
						}
					]
				},
				"2": {
					"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.function.call.cuda-cpp"
				},
				"3": {
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				},
				"4": {},
				"5": {
					"name": "entity.name.scope-resolution.function.call.cuda-cpp"
				},
				"6": {
					"name": "meta.template.call.cuda-cpp",
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				},
				"7": {},
				"8": {
					"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.function.call.cuda-cpp"
				}
			}
		},
		"scope_resolution_function_definition": {
			"match": "(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?::)*\\s*+",
			"captures": {
				"0": {
					"patterns": [
						{
							"include": "#scope_resolution_function_definition_inner_generated"
						}
					]
				},
				"1": {
					"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.function.definition.cuda-cpp"
				},
				"2": {
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				}
			}
		},
		"scope_resolution_function_definition_inner_generated": {
			"match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?(::)",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#scope_resolution_function_definition_inner_generated"
						}
					]
				},
				"2": {
					"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.function.definition.cuda-cpp"
				},
				"3": {
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				},
				"4": {},
				"5": {
					"name": "entity.name.scope-resolution.function.definition.cuda-cpp"
				},
				"6": {
					"name": "meta.template.call.cuda-cpp",
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				},
				"7": {},
				"8": {
					"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.function.definition.cuda-cpp"
				}
			}
		},
		"scope_resolution_function_definition_operator_overload": {
			"match": "(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?::)*\\s*+",
			"captures": {
				"0": {
					"patterns": [
						{
							"include": "#scope_resolution_function_definition_operator_overload_inner_generated"
						}
					]
				},
				"1": {
					"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.function.definition.operator-overload.cuda-cpp"
				},
				"2": {
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				}
			}
		},
		"scope_resolution_function_definition_operator_overload_inner_generated": {
			"match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?(::)",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#scope_resolution_function_definition_operator_overload_inner_generated"
						}
					]
				},
				"2": {
					"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.function.definition.operator-overload.cuda-cpp"
				},
				"3": {
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				},
				"4": {},
				"5": {
					"name": "entity.name.scope-resolution.function.definition.operator-overload.cuda-cpp"
				},
				"6": {
					"name": "meta.template.call.cuda-cpp",
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				},
				"7": {},
				"8": {
					"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.function.definition.operator-overload.cuda-cpp"
				}
			}
		},
		"scope_resolution_inner_generated": {
			"match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?(::)",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#scope_resolution_inner_generated"
						}
					]
				},
				"2": {
					"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.cuda-cpp"
				},
				"3": {
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				},
				"4": {},
				"5": {
					"name": "entity.name.scope-resolution.cuda-cpp"
				},
				"6": {
					"name": "meta.template.call.cuda-cpp",
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				},
				"7": {},
				"8": {
					"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.cuda-cpp"
				}
			}
		},
		"scope_resolution_namespace_alias": {
			"match": "(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<3>?)+>)(?:\\s)*+)?::)*\\s*+",
			"captures": {
				"0": {
					"patterns": [
						{
							"include": "#scope_resolution_namespace_alias_inner_generated"
						}
					]
				},
				"1": {
					"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.namespace.alias.cuda-cpp"
				},
				"2": {
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				}
			}
		},
		"scope_resolution_namespace_alias_inner_generated": {
			"match": "((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|__forceinline__|atomic_noexcept|__has_include|atomic_cancel|atomic_commit|dynamic_cast|__constant__|__restrict__|__noinline__|thread_local|synchronized|static_cast|__managed__|const_cast|__shared__|__global__|__device__|co_return|constexpr|constexpr|constexpr|consteval|protected|namespace|co_return|noexcept|noexcept|continue|co_await|co_yield|volatile|register|restrict|explicit|__host__|volatile|noexcept|template|operator|decltype|typename|requires|co_await|co_yield|reflexpr|alignof|alignas|default|mutable|virtual|mutable|private|include|warning|_Pragma|defined|typedef|__asm__|concept|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|public|ifndef|define|pragma|export|import|module|compl|bitor|throw|or_eq|while|catch|break|class|union|const|const|endif|ifdef|undef|error|using|else|goto|case|enum|elif|else|line|this|not|new|xor|and|for|try|asm|or|do|if|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(?:[^'\"<>]*+|\"(?:[^\"]*|\\\\\")\")|'(?:[^']*|\\\\')')\\g<7>?)+>)(?:\\s)*+)?(::)",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#scope_resolution_namespace_alias_inner_generated"
						}
					]
				},
				"2": {
					"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.namespace.alias.cuda-cpp"
				},
				"3": {
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				},
				"4": {},
				"5": {
					"name": "entity.name.scope-resolution.namespace.alias.cuda-cpp"
				},
				"6": {
					"name": "meta.template.call.cuda-cpp",
					"patterns": [
						{
							"include": "#template_call_range"
						}
					]
				},
				"7": {},
				"8": {
					"name": "punctuation.separator.namespace.access.cuda-cpp punctuation.separator.scope-resolution.namespace.alias.cuda-cpp"
				}
			}
		},
		"scope_resolution_namespace_blo